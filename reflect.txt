/*/////////////////////////////////////////////////////////////////////////
                        Assignment 1 - Milestone 3
Full Name  : Rhowen Vaughn Wendelle Yu
Student ID#: 142671221
Email      : rvwyu@myseneca
Section    : ZRA

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
/////////////////////////////////////////////////////////////////////////*/ 

Create a text file named “reflect.txt” be sure to include your confirmation of authenticity and personal information at the beginning of the file and record your answers to the below questions in this file.
• Refer to the reflection rubric link noted at the beginning of this document on page 3
• Answer each question in sentence/paragraph form unless otherwise instructed.
• Do not include the question in your response.
• A minimum 600 overall word count is required and must be concise with no repetition.
• Whenever possible, be sure to justify your answers with a brief example to demonstrate your view(s).

1. This milestone required you to create additional functions that were not specified or provided for you. Briefly describe three functions you created and include the purpose and value those functions contributed towards the application. Organize your answer for each function by first including the function prototype (not the definition) followed by your explanation. (Minimum: 300 words)

Three functions I made that I believe really helped and complemented the original functions are the following: (1)  Function: isTimeSlotAvailable(struct Date date, struct Time time, struct Appointment* app, int maxAppointments) This function is important as to make sure that no double bookings occur and that the scheduling process remains smooth and reliable. This function is really helpful as to  avoid conflicts on our future users whenever they will use this app as they can already check if the time slot is full. It works by looping through the existing appointments and checking if the desired date and time match any existing records, this function ensures that no two appointments are scheduled for the same time.(2) Function: sortAppointmentsByTime(struct Appointment appoints[], int max) For this one, it helps make the system organize and clean. With this, we can sort with time and find the correct specific appointments making it really efficient and less confusing. This works by converting the date and time of the appointments into total minutes, thereby simplifying the sorting process. We presented it in a aesthetic and simple way, making it effective and good solution for our application, it might not be useful for very big datas, but with the scope of the application, it works and does a great job. (3) Function: findNextAvailableSlot(struct Appointment* app, int maxAppointments) This one is designed to identify an unoccupied slot within the appointments array, effectively searching for a location to store a new appointment. It accomplishes this action by going through the array in a loop and verifying whether the patient number is below 1, a condition that signifies an unoccupied position. When such a position is detected, the function returns the index of that accessible slot. This is a perfect function as it works together with the other two functions. All together the three are perfectly tailored suited for the simple needs of our application.

2. If you coded your solution correctly, there should be at most only one “scanf” function call in the client.c source code file – explain why the number of scanf function calls were purposely and significantly minimized in this module. (Minimum: 150 words)

There is one big reason as to why the number of scanf function calls were significantly minimized in this module that we have, (1) We were able to use functions so that we can easily invoke them. Using the  functions on the core.c file, we were able to easily handle the input/output from the code  whilst also keeping it very simple and clean by just using these functions, we were able to use it for the different parts on the clinic.c code, eg. when we call inputCharOption to check and ensure that the user is inputting the valid character that should belong to it.  By having multiple separate functions, I can use the same code over and over again in the different blocks of the code and also change it whenever i needed as I can find it easily in just one place and not scrambled all throughout the code. By also doing this, I can make sure that the code encounters less errors and overflows as it already has a centralized rules that it has to follow consistently, making it easier for the code.

3. In question one above you identified three functions you created. For each function, explain what module you placed it in and why? What factors and considerations contributed towards your decision? (Minimum: 150 words)
void sortAppointmentsByTime(struct Appointment appoints[], int max);

The sortAppointmentsByTime() function was added to the clinic.c module because it is critical for organizing appointments chronologically. This function converts the date and time into total minutes and sorts the appointment array accordingly. It ensures that appointments are aligned in the correct order by facilitating smooth appointment handling within the clinic's scheduling system. Being in the clinic.c module, along with other appointment-related functionalities, improves code consistency and aids in making the process smoother.

The clinic.c module also includes the isTimeSlotAvailable() function. It is essential for determining the availability of specific time slots for scheduling appointments because it operates directly on the Appointment struct array. This function ensures that no appointments overlap and that each time slot can only be booked once. By locating it within the clinic.c module, it can collaborate with other appointment scheduling functions, preserving the codebase's integrity and manageability.

Lastly, the clinic.c module also contains the findNextAvailableSlot() function, which is responsible for identifying the next open slot in the appointment array. This function searches through existing appointments for open slots, assisting in the efficient allocation of new appointments. Its placement in the clinic.c module keeps it close to the other functions that manipulate and access appointment data because it operates directly on the Appointment struct array. Such an organization ensures that these functions interact seamlessly and contributes to a well-structured and maintainable code system.